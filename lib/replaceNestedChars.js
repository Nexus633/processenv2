'use strict';/** * This function parsed nested environment key/value pairs * * If the nested element (**elem**) is present in the environment object (env), * this will be parsed and returned as value (**val**). * If the key is not present, the element (**elem**) is returned as a whole. * * @function replaceNestedChars * * @param {string} elem nested element * @param {string} val the unparsed value * @param {object} env environment object * @returns {string} (**elem**|**val**) * * @example *      replaceNestedChars('${HOME}', '${HOME}/log', { HOME: '/var/www' }); */const replaceNestedChars = (elem, val, env) => {    let rV = elem.replace('${', '');    rV = rV.replace('}', '');    if (val === null || typeof val === 'undefined' || env === null || typeof env === 'undefined') {        return elem;    }    if (Object.keys(env).includes(rV)) {        return val.replace('${' + rV + '}', env[rV]);    }    return elem;};module.exports = { replaceNestedChars };